<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<name>mtss4sdk - Application</name>
	<description>mtss4sdk - Application</description>

	<artifactId>mtss4sdk-application</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<parent>
		<groupId>com.devonfw.java.mtss4sdk</groupId>
		<artifactId>mtss4sdk</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<properties>
		<java.version>1.8</java.version>
		<js.client.dir>../../angular</js.client.dir>
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
		<node.version>v8.9.4</node.version>
		<npm.version>5.6.0</npm.version>
	</properties>

	<dependencies>

		<!-- DEVON -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.devonfw.java.mtss4sdk</groupId>
			<artifactId>mtss4sdk-api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>3.4.3</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
			<version>3.7.1</version>
		</dependency>
		<dependency>
			<groupId>com.devonfw.java.starters</groupId>
			<artifactId>devon4j-starter-spring-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.devonfw.java.modules</groupId>
			<artifactId>devon4j-beanmapping</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-ws</artifactId>
			<version>1.4.7.RELEASE</version>
		</dependency>
		<dependency><!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>


		<!-- CXF for REST and Webservices -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<exclusions>
				<exclusion>
					<groupId>asm</groupId>
					<artifactId>asm</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-service-description</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
		</dependency>

		<!-- S4SDK -->

		<dependency>
			<groupId>com.sap.cloud.s4hana.cloudplatform</groupId>
			<artifactId>scp-cf</artifactId>
		</dependency>
		<dependency>
			<groupId>com.sap.cloud.s4hana</groupId>
			<artifactId>s4hana-all</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>com.sap.hcp.cf.logging</groupId>
			<artifactId>cf-java-logging-support-logback</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Since com.sap.xs2.security:java-container-security is not available 
			in Maven Central as of today, you need to download this dependency manually. 
			The library is available for download at: https://launchpad.support.sap.com/#/softwarecenter/search/XS_JAVA -->

		<!-- Dependencies for security setup -->
		<dependency>
			<groupId>com.sap.xs2.security</groupId>
			<artifactId>java-container-security</artifactId>
		</dependency>
		<dependency>
			<groupId>com.sap.xs2.security</groupId>
			<artifactId>java-container-security-api</artifactId>
			<version>0.28.6</version>
		</dependency>
		<dependency>
			<groupId>com.sap.xs2.security</groupId>
			<artifactId>security-commons</artifactId>
		</dependency>
		<!-- <dependency> -->
		<!-- <groupId>org.hibernate.validator</groupId> -->
		<!-- <artifactId>hibernate-validator</artifactId> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
			<version>1.0.9.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>com.sap.security.nw.sso.linuxx86_64.opt</groupId>
			<artifactId>sapjwt.linuxx86_64</artifactId>
			<version>1.1.19</version>
		</dependency>

		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<configuration>
					<attach>false</attach>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.sap.cloud.s4hana.plugins</groupId>
				<artifactId>s4sdk-maven-plugin</artifactId>
				<version>2.9.0</version>
				<executions>
					<execution>
						<goals>
							<goal>usage-analytics</goal>
						</goals>
						<configuration>
							<skipUsageAnalytics>false</skipUsageAnalytics>
							<generateSalt>true</generateSalt>
							<!-- Note: A random salt is auto-generated once the project is built 
								for the first time. Please keep the generated salt in the POM file, for example, 
								when pushing to git. To learn more, visit: https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/ -->
							<salt>bac4e466a91da1944504e24eda28ed09cb2d41f06afa0d0b3ff16830de22d47e</salt>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.sap.cloud.s4hana.plugins
										</groupId>
										<artifactId>
											s4sdk-maven-plugin
										</artifactId>
										<versionRange>
											[2.9.0,)
										</versionRange>
										<goals>
											<goal>usage-analytics</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.eirslett</groupId>
										<artifactId>frontend-maven-plugin</artifactId>
										<versionRange>
											[${frontend-maven-plugin.version},)
										</versionRange>
										<goals>
											<goal>install-node-and-npm</goal>
											<goal>npm</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
			</resource>
			<resource>
				<directory>${js.client.dir}/dist</directory>
				<targetPath>static</targetPath>
			</resource>
		</resources>
	</build>

	<profiles>
		<profile>
			<id>jsclient</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>${frontend-maven-plugin.version}</version>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
							<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
							<yarnInheritsProxyConfigFromMaven>false</yarnInheritsProxyConfigFromMaven>
							<workingDirectory>${js.client.dir}</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>${node.version}</nodeVersion>
									<npmVersion>${npm.version}</npmVersion>
								</configuration>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<!-- Optional configuration which provides for running any npm command -->
								<configuration>
									<arguments>install</arguments>
								</configuration>
							</execution>
							<execution>
								<id>npm run build</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>run build:prodscp</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Filtering the src/main/client/dist/index.html to set the current 
						version and build timestamp as meta tags in the HTML document head. Technically, 
						a copy of index.html has to be created: first the file is filtered and copied 
						to target/client and then copied to src/main/client/dist overwriting the 
						previous version. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>filter-index.html</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<useDefaultDelimiters>true</useDefaultDelimiters>
									<outputDirectory>${project.build.directory}/client</outputDirectory>
									<resources>
										<resource>
											<directory>${js.client.dir}/dist</directory>
											<filtering>true</filtering>
											<includes>
												<include>index.html</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>

								<id>copy-index.html</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${js.client.dir}/dist</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.build.directory}/client</directory>
											<filtering>false</filtering>
											<includes>
												<include>index.html</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
