node {
    stage('Check out MyThaiStar') {
        git branch: 'develop', credentialsId: 'github-devonfw-ci', url: 'https://github.com/devonfw/my-thai-star'
    }
   
    stage('Load tools') {
        tool 'Node 7'
        tool 'Angular CLI'
        tool 'Yarn'
        tool name: 'Maven 3.3.9', type: 'maven'
        env.JAVA_HOME="${tool 'OpenJDK 1.8'}"
        env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
    }
    
    stage('CLIENT Install Dependencies') {
        sh """
            cd angular
            #yarn upgrade
            find . -name "node_modules" -exec rm -rf '{}' +
            npm i
        """
    }
    
    stage('SERVER Install Dependencies') {
        configFileProvider([configFile(fileId: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', variable: 'MAVEN_SETTINGS')]) {
            sh "cd java/mtsj && mvn -s $MAVEN_SETTINGS clean install -Dmaven.test.skip=true"
        }
    }
    
    stage('CLIENT Code Quality') {
        sh """
            cd angular
            ng lint --format checkstyle
        """
    }
    
    stage('SERVER Code Quality') {
        def scannerHome = tool 'SonarQube Scanner';
        withSonarQubeEnv('SonarQube') 
        {
            sh "cd java/mtsj && ${scannerHome}/bin/sonar-scanner -Dsonar.login=admin -Dsonar.password=admin -Dsonar.projectKey=testmythaistar -Dsonar.projectName=test_my_thai_star -Dsonar.projectVersion=1.0 -Dsonar.sources=. -Dsonar.language=java"
        }
    }
    
    stage('CLIENT Unit Tests') {
        sh """
            cd angular
            ng test --browsers PhantomJS --single-run
        """
    }
    
    stage('SERVER Unit Tests') {
        configFileProvider([configFile(fileId: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', variable: 'MAVEN_SETTINGS')]) {
            sh "cd java/mtsj && mvn -s $MAVEN_SETTINGS test"
        }
    }

    stage('Build Artifacts') {
        parallel (
            "CLIENT" : {
                sh """
                    cd angular
                    ng build --aot --environment=prodcompose
                """
            },
            "SERVER" : {
                configFileProvider([configFile(fileId: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', variable: 'MAVEN_SETTINGS')]) {
                    sh "cd java/mtsj && mvn -s $MAVEN_SETTINGS clean deploy -Dmaven.test.skip=true"
                }
            }
        )
    }
    
    stage('Deploy Artifacts') {
        sshagent (credentials: ['3d0fa2a4-5cf0-4cf5-a3fd-23655eb33c11']) {
            sh """
                # Copy client artifact and Dockerfile to DP angular directory
                scp -o StrictHostKeyChecking=no -r angular/Dockerfile root@10.40.235.244:/root/mythaistar/angular
                scp -o StrictHostKeyChecking=no -r angular/dist root@10.40.235.244:/root/mythaistar/angular
                
                # Copy server artifact and Dockerfile to DP java directory
                scp -o StrictHostKeyChecking=no -r java/Dockerfile root@10.40.235.244:/root/mythaistar/java
                scp -o StrictHostKeyChecking=no -r java/mtsj/server/target/mythaistar.war root@10.40.235.244:/root/mythaistar/java
                
                # Copy docker-compose file to main DP MTS directory
                scp -o StrictHostKeyChecking=no -r docker/docker-compose.yml root@10.40.235.244:/root/mythaistar/
                
                # Stop containers
                ssh -o StrictHostKeyChecking=no root@10.40.235.244 docker stop mythaistar_client_compose_1
                ssh -o StrictHostKeyChecking=no root@10.40.235.244 docker stop mythaistar_server_compose_1
                ssh -o StrictHostKeyChecking=no root@10.40.235.244 cd mythaistar && docker-compose rm -f
                ssh -o StrictHostKeyChecking=no root@10.40.235.244 cd mythaistar && docker-compose pull
                ssh -o StrictHostKeyChecking=no root@10.40.235.244 cd mythaistar && docker-compose up --build -d
            """
        }
        sh 'echo \\"Application available at http://de-mucdevondepl01:8091\\"'
    }
}